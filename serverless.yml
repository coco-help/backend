# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: coco-api
provider:
  name: aws
  runtime: python3.7
  memorySize: 128
  region: eu-central-1
  environment:
    DB_HOST:
      Fn::GetAtt: ["helperDatabase", "Endpoint.Address"]
    DB_USER: ${env:POSTGRES_MASTER_USER, 'postgres'}
    DB_PASSWORD: ${env:POSTGRES_MASTER_PASSWORD}
    SENTRY_RELEASE: ${env:SENTRY_RELEASE}
    SENTRY_ENVIRONMENT: ${opt:stage, 'dev'}

package:
  exclude:
    - .envrc
    - .gitlab-ci.yml
    - .pytest_cache/**
    - .pre-commit-config.yaml
    - .idea/**
    - tests/**
    - schema/**
    - pyproject.toml
    - poetry.lock
    - README.md
    - package.json
    - package-lock.json
    - venv
    - migrations/**
    - __pycache__/**
    - node_modules/**

functions:
  register:
    # handler value syntax is `{cargo-package-name}.{bin-name}`
    # or `{cargo-package-name}` for short when you are building a
    # default bin for a given package.
    handler: corona_connect.register
    events:
      - http:
          path: '/register'
          method: POST
          cors: true
          request:
            schema:
              application/json: ${file(schema/create_user.json)}

  get_helper:
    handler: corona_connect.get_helper
    events:
      - http:
          path: '/helper/{phone}'
          method: GET
          cors: true
          request:
            parameters:
              paths:
                phone: true

  update_helper:
    handler: corona_connect.update_helper
    events:
      - http:
          path: '/helper/{phone}'
          method: PUT
          cors: true
          request:
            parameters:
              paths:
                phone: true
            schema:
              application/json: ${file(schema/update_user.json)}

  delete_helper:
    handler: corona_connect.delete_helper
    events:
      - http:
          path: '/helper/{phone}'
          method: DELETE
          cors: true
          request:
            parameters:
              paths:
                phone: true

  phone:
    handler: corona_connect.phone
    events:
      - http:
          path: '/phone'
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                zip: true


  verify:
    handler: corona_connect.verify
    events:
      - http:
          path: '/verify'
          method: GET
          request:
            parameters:
              querystrings:
                code: true
                phone: true



# you can add CloudFormation resource templates here
resources:
  Resources:
     helperDatabase:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.t2.micro
        AllocatedStorage: 20
        Engine: postgres
        MasterUsername: postgres
        MasterUserPassword: ${env:POSTGRES_MASTER_PASSWORD}

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    usePoetry: true
